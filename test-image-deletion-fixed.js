// test-image-deletion-fixed.js - Script de prueba para verificar eliminaci√≥n de im√°genes corregida
console.log('üß™ Iniciando prueba de eliminaci√≥n de im√°genes corregida...');

window.testImageDeletionFixed = async function() {
    console.log('üöÄ Probando eliminaci√≥n de im√°genes con estructura corregida...');
    
    if (!window.supabase) {
        console.error('‚ùå Supabase no est√° disponible');
        return;
    }
    
    try {
        // 1. Obtener una propiedad con im√°genes para probar
        console.log('\nüìã Buscando propiedades con im√°genes...');
        const { data: properties, error: propError } = await window.supabase
            .from('properties')
            .select('id, title')
            .limit(5);
        
        if (propError) {
            console.error('‚ùå Error obteniendo propiedades:', propError);
            return;
        }
        
        if (!properties || properties.length === 0) {
            console.log('‚ö†Ô∏è No hay propiedades para probar');
            return;
        }
        
        console.log(`‚úÖ Encontradas ${properties.length} propiedades`);
        
        // Buscar una propiedad que tenga im√°genes
        let testProperty = null;
        for (const prop of properties) {
            const { data: images, error: imgError } = await window.supabase
                .from('property_images')
                .select('property_id, image_url, image_order, is_main, created_at')
                .eq('property_id', prop.id);
            
            if (!imgError && images && images.length > 0) {
                testProperty = { ...prop, images };
                console.log(`üì∏ Propiedad "${prop.title}" tiene ${images.length} im√°genes`);
                break;
            }
        }
        
        if (!testProperty) {
            console.log('‚ö†Ô∏è No se encontr√≥ ninguna propiedad con im√°genes para probar');
            return;
        }
        
        console.log(`\nüéØ Probando con propiedad: "${testProperty.title}" (${testProperty.images.length} im√°genes)`);
        
        // 2. Mostrar estructura de las im√°genes
        console.log('\nüìä Estructura de im√°genes encontradas:');
        testProperty.images.forEach((img, index) => {
            console.log(`   Imagen ${index + 1}:`);
            console.log(`     URL: ${img.image_url}`);
            console.log(`     Orden: ${img.image_order}`);
            console.log(`     Principal: ${img.is_main}`);
            console.log(`     Creada: ${img.created_at}`);
        });
        
        // 3. Probar funci√≥n de eliminaci√≥n mejorada
        console.log('\nüóëÔ∏è Probando funci√≥n de eliminaci√≥n mejorada...');
        
        if (window.deletePropertyImageImproved) {
            console.log('‚úÖ Funci√≥n deletePropertyImageImproved disponible');
            
            // Probar con la primera imagen
            const firstImage = testProperty.images[0];
            console.log(`üß™ Probando eliminaci√≥n de: ${firstImage.image_url}`);
            
            const result = await window.deletePropertyImageImproved(
                testProperty.id, 
                firstImage.image_url, 
                null // No hay ID en la estructura real
            );
            
            if (result && result.success) {
                console.log('‚úÖ Eliminaci√≥n exitosa');
                
                // Verificar que se elimin√≥
                const { data: remainingImages } = await window.supabase
                    .from('property_images')
                    .select('property_id, image_url, image_order, is_main, created_at')
                    .eq('property_id', testProperty.id);
                
                console.log(`üìä Im√°genes restantes: ${remainingImages.length}`);
                
                if (remainingImages.length === testProperty.images.length - 1) {
                    console.log('‚úÖ Verificaci√≥n exitosa: Se elimin√≥ exactamente 1 imagen');
                } else {
                    console.log('‚ö†Ô∏è Advertencia: El n√∫mero de im√°genes no coincide con lo esperado');
                }
                
            } else {
                console.error('‚ùå Error en eliminaci√≥n:', result?.error || 'Error desconocido');
            }
            
        } else {
            console.error('‚ùå Funci√≥n deletePropertyImageImproved no est√° disponible');
        }
        
        // 4. Probar funci√≥n getPropertyImages
        console.log('\nüì∏ Probando funci√≥n getPropertyImages...');
        
        if (window.getPropertyImages) {
            const images = await window.getPropertyImages(testProperty.id);
            console.log(`‚úÖ getPropertyImages devolvi√≥ ${images.length} im√°genes`);
            
            if (images.length > 0) {
                console.log('üìã Estructura de la primera imagen:');
                const firstImg = images[0];
                Object.entries(firstImg).forEach(([key, value]) => {
                    console.log(`   ${key}: ${typeof value} = ${JSON.stringify(value)}`);
                });
            }
        } else {
            console.error('‚ùå Funci√≥n getPropertyImages no est√° disponible');
        }
        
        console.log('\n‚úÖ Prueba completada');
        
    } catch (error) {
        console.error('‚ùå Error en la prueba:', error);
    }
};

console.log('‚úÖ Script de prueba cargado');
console.log('üí° Ejecuta: window.testImageDeletionFixed()');